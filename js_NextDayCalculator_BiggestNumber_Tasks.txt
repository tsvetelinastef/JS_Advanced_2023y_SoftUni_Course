 function that calculates the date of the next day by given year, month, day? 
 
 def next_day(year, month, day):
    if month in [4, 6, 9, 11] and day == 30:
        day = 1
        month += 1
    elif month == 2:
        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
            if day == 29:
                day = 1
                month += 1
        elif day == 28:
            day = 1
            month += 1
    elif day == 31:
        if month == 12:
            day = 1
            month = 1
            year += 1
        else:
            day = 1
            month += 1
    else:
        day += 1
    return year, month, day


This function takes in year, month, and day as integers and returns the date of the next day as 
a tuple of integers (year, month, day). It uses if-elif statements to check for the end of a month,
 and adjusts the day, month, and year accordingly.
 =========================================================================================================
 function in JavaScript that calculates the date of the next day by given year, month, day?
 
 function nextDay(year, month, day) {
    if ([4, 6, 9, 11].includes(month) && day === 30) {
        day = 1;
        month += 1;
    } else if (month === 2) {
        if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
            if (day === 29) {
                day = 1;
                month += 1;
            }
        } else if (day === 28) {
            day = 1;
            month += 1;
        }
    } else if (day === 31) {
        if (month === 12) {
            day = 1;
            month = 1;
            year += 1;
        } else {
            day = 1;
            month += 1;
        }
    } else {
        day += 1;
    }
    return [year, month, day];
}

This function takes in year, month, and day as integers and returns the date of the next day
 as an array of integers [year, month, day]. It uses if-else statements to check for the 
 end of a month, and adjusts the day, month, and year accordingly.
 
=========================================================================================================
Write a function that finds the biggest number in JavaScript?

Here's a function in JavaScript that returns the largest number in an array:
function findLargestNumber(numbers) {
  return Math.max(...numbers);
}

Example usage:
const numbers = [1, 2, 3, 4, 5];
console.log(findLargestNumber(numbers)); // Output: 5

========================================================================================================
convert from binary to a decimal number in JavaScript?

You can use the `parseInt()` function in JavaScript to convert a
 binary number represented as a string to a decimal number.
 The second argument to `parseInt()` is the radix, which
 should be set to `2` for binary numbers:
 
 function binaryToDecimal(binary) {
  return parseInt(binary, 2);
}

Example usage:
const binary = '1100';
console.log(binaryToDecimal(binary)); // Output: 12

========================================================================================================
write a function in JavaScript that prints a chessboard of size nXn... the input comes as a single number argument n and the output should be returned as a result of the function in the form as a string?
Input:  3
 Output:
 <div class="chessboard">
 <div>
 <span class="black"></span>
 <span class="white"></span>
 <span class="black"></span>
 </div>
 <div>
 <span class="white"></span>
 <span class="black"></span>
 <span class="white"></span>
 </div>
 <div>
 <span class="black"></span>
 <span class="white"></span>
 <span class="black"></span>
 </div>
</div>

Here is a function that generates a string representation of a n x n chessboard in HTML:
function generateChessboard(n) {
  let board = '<div class="chessboard">\n';
  for (let i = 0; i < n; i++) {
    board += ' <div>\n';
    for (let j = 0; j < n; j++) {
      const color = (i + j) % 2 === 0 ? 'black' : 'white';
      board += `  <span class="${color}"></span>\n`;
    }
    board += ' </div>\n';
  }
  board += '</div>\n';
  return board;
}

Example usage:
console.log(generateChessboard(3));

Output:
<div class="chessboard">
 <div>
  <span class="black"></span>
  <span class="white"></span>
  <span class="black"></span>
 </div>
 <div>
  <span class="white"></span>
  <span class="black"></span>
  <span class="white"></span>
 </div>
 <div>
  <span class="black"></span>
  <span class="white"></span>
  <span class="black"></span>
 </div>
</div>

===========================================================================================================
Write a function in JavaScript , that checks whether the result of the multiplication numOne * numTwo * numThree is positive
or negative. Try to do this WITHOUT multiplying the 3 numbers.
Input
The input comes as parameters named numOne, numTwo, numThree.
Output
• If the result is positive, print on the console -> "Positive"
• Otherwise, print -> "Negative"

Input  5, 12, -15  Output Negative

function checkProductSign(numOne, numTwo, numThree) {
if (numOne === 0 || numTwo === 0 || numThree === 0) { // if any of the numbers is 0, product is 0 and result is positive
console.log("Positive");
} else if ((numOne < 0 && numTwo < 0 && numThree < 0) || (numOne > 0 && numTwo > 0 && numThree < 0) || (numOne > 0 && numTwo < 0 && numThree > 0) || (numOne < 0 && numTwo > 0 && numThree > 0)) {
console.log("Negative"); // if two or all three numbers are negative, the product is negative
} else {
console.log("Positive"); // otherwise, product is positive
}
}

checkProductSign(5, 12, -15); // Negative
=============================================================================================================
1. Smallest of Three Numbers
Write a function in JavaScript that receives three integers and prints the smallest number. Use an appropriate name for the 
function.

Input  2, 5, 3 Output 2

Here is the function in JavaScript that receives three integers and prints the smallest number:

function findSmallestNumber(numOne, numTwo, numThree) {
  if (numOne <= numTwo && numOne <= numThree) {
    console.log(numOne);
  } else if (numTwo <= numOne && numTwo <= numThree) {
    console.log(numTwo);
  } else {
    console.log(numThree);
  }
}

findSmallestNumber(2, 5, 3); // 2

The function takes in three parameters, numOne, numTwo, 
and numThree. It uses a series of conditional statements
 to compare the values of these numbers and determine 
 the smallest one. The smallest number is then printed 
 to the console using console.log(). In the example provided,
 the function would output 2 to the console, as this is 
 the smallest of the three input numbers.
 
 ============================================================================================================
 
 Write  a program in JavaScript .... 
 Each item has a price rating, a number that describes how 
 valuable that item is for John's owner. You will be given 
 an entry point from which John will break the items to his 
 left and then to his right. John will never break the item 
 at his entry point. You must calculate the damage to both his 
 left and right, then print only the higher(bigger) damage to
 the household. If both sums are equal, print the left one.                                                                                      Input:  ([1, 5, 1], 1, "cheap")                                                                                                                  
 Output: Left - 1
 
 const calculateDamage = (items, entryPoint, priceRating) => {
let leftSum = 0;
let rightSum = 0;

// Calculate damage to left side
for (let i = entryPoint - 1; i >= 0; i--) {
if (items[i] >= priceRating) {
leftSum += items[i];
} else {
break;
}
}

// Calculate damage to right side
for (let i = entryPoint + 1; i < items.length; i++) {
if (items[i] >= priceRating) {
rightSum += items[i];
} else {
break;
}
}

// Print higher damage or left if both sums are equal
if (leftSum === rightSum) {
console.log("Left - " + leftSum);
} else {
console.log(leftSum > rightSum ? "Left - " + leftSum : "Right - " + rightSum);
}
}

// Example usage
calculateDamage([1, 5, 1], 1, "cheap"); // Output: Left - 1


================================================================================
explaination of this code in JS:  function race(data){
    let participants = {}
    let participantsInputArr = data.shift().split(", ");
    let patternName = /[A-Za-z]/g;
    let patternDistance = /[0-9]/g;  // copy from regex101 as I delete the "m"

    for(let participant of participantsInputArr){
        participants[participant] = 0;
    }

    for(let line of data){
        if(line === "end of race"){
            break;
        }

        let name = line.match(patternName).join("");
        let distance = line.match(patternDistance);
        let tempDistance = 0;

        for(let el of distance){
            tempDistance += Number(el);
        }

        if(participants.hasOwnProperty(name)){
            participants[name] += tempDistance;
        }

        let sortArr = Object.entries(participants).sort((a,b) => b[1] - a[1]);
        console.log(`1st place: ${sortArr[0][0]}`);
        console.log(`2nd place: ${sortArr[1][0]}`);
        console.log(`3rd place: ${sortArr[2][0]}`);
    }
}

race(['George, Peter, Bill, Tom',
'G4e@55or%6g6!68e!!@ ',
'R1@!3a$y4456@',
'B5@i@#123ll',
'G@e54o$r6ge#',
'7P%et^#e5346r',
'T$o553m&6',
'end of race']);

race(['Ronald, Bill, Tom, Timmy, Maggie, Michonne',
'Mi*&^%$ch123o!#$%#nne787) ',
'%$$B(*&&)i89ll)*&) ',
'R**(on%^&ald992) ',
'T(*^^%immy77) ',
'Ma10**$#g0g0g0i0e',
'end of race']);

This is a JavaScript function that simulates a race between several participants. Here is an explanation of how the code works:
First, the function takes an array of strings called data as input. It initializes an empty object called participants and an array 
called participantsInputArr by using the shift() method to remove the first string element from the data array, which contains a 
comma-separated list of participant names. It also creates two regular expressions, patternName and patternDistance, which are used 
to match the name and distance values in each subsequent line of the data array.
Next, the function uses a for...of loop to iterate over the participantsInputArr array and adds each participant as a property to 
the participants object, with an initial value of zero.
Then, the function uses another for...of loop to iterate over the remaining lines of the data array. If a line is equal to the 
string "end of race", the loop is broken. Otherwise, the function extracts the participant name and distance from the line using
 the match() method and the patternName and patternDistance regular expressions. It then calculates the total distance traveled 
 by the participant by iterating over the distance array and adding each element to a temporary variable called tempDistance.
 Finally, the function checks if the participants object has a property with the name of the participant extracted from the line,
 and if so, adds the tempDistance value to their total distance traveled.
 
 
After each iteration of the loop, the function sorts the participants object by distance traveled in descending order using the Object.entries() and sort() methods. It then logs the names of the top three participants to the console using template literals.
When the loop has completed, the function has printed out the winners of the race.
The function is called twice with different sets of data to simulate two different races, and the output of each race is printed to the console.


